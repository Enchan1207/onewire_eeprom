.program eeprom
.side_set 1 pindirs

; インストラクション数削減のため、スタックにpushする値と操作とを規定する
;
; FFxxxxxx: EEPROMリセット
; 000000nn: nnh書き込み
; 000001FF: 読み込み (ACK送信)
; 000002FF: 読み込み (NACK送信)

.wrap_target
    ready:
    ; read command
                pull block          side 0

    ; if most-significant byte is not 0, reset eeprom
                out x, 8            side 0
                jmp x-- reset       side 0

    ; the next of MSB indicates Read(>1) / Write(0)
                out x, 16           side 0

    ; send or receive 8-bit data
    send_loop:
                out y, 1            side 1 [3]  ; pull down
                jmp y-- send_1      side 1      ; wait 1.25us = 6cy to send "1"
                set y, 4            side 1      ; wait 6.5us = 26cy to send "0"
    send_0:     jmp y-- send_0      side 1 [3]
    send_1:     nop                 side 0      ; pin will be pulled up by register
                in pins, 1          side 0      ; read response from chip

                set y, 2            side 0 [1]  ; wait 8.25us (t_rcv)
    wait_c:     jmp y-- wait_c      side 0 [8]

                jmp !osre send_loop side 0

    ; read or write ACK/NACK
                jmp x-- send_back   side 1      ; if x > 0 send back ACK or NACK
                jmp read_ack        side 1      ; else read ACK
    
    ; if x == 2 send NACK else send ACK
    send_back:  jmp x-- send_nack   side 1 [3]  ; wait 1.25us = 6cy to send NACK (1)
                set y, 4            side 1      ; wait 6.5us = 26cy to send ACK (0)
    send_ack:   jmp y-- send_ack    side 1 [4]
    send_nack:  nop                 side 0      ; pin will be pulled up by register

    ; push received data to FIFO, then return to top
                jmp push_data       side 0

reset:
                set x, 23           side 1      ; pull down
    wait_a:     jmp x-- wait_a      side 1 [15] ; wait 96us (t_reset)

                set x, 4            side 0      ; pin will be pulled up by register
    wait_b:     jmp x-- wait_b      side 0 [7]  ; wait 10.25us (t_rrt)

                nop                 side 1 [9]  ; wait 1.25us (t_drr)

read_ack:
                nop                 side 0 [1]  ;
                in pins, 1          side 0      ; read response from chip

push_data:
                set y, 2            side 0 [1]  ; wait 8.25us (t_rcv)
    wait_d:     jmp y-- wait_d      side 0 [8]

                push noblock        side 0
.wrap

% c-sdk {
void eeprom_program_init(PIO pio, uint sm, uint offset, uint pin) {

    pio_gpio_init(pio, pin);

    // 初期状態では入力にしておく
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, false);

    pio_sm_config c = eeprom_program_get_default_config(offset);

    // 左シフトで入れる
    sm_config_set_in_shift(&c, false, false, 32);
    sm_config_set_out_shift(&c, false, false, 32);

    // setで設定するピンのベースと数を設定
    sm_config_set_set_pins(&c, pin, 1);

    // side-setで設定するピンのベースを設定
    sm_config_set_sideset_pins(&c, pin);

    // inで取り込むピンのベースを設定
    sm_config_set_in_pins(&c, pin);

    // クロック設定
    sm_config_set_clkdiv_int_frac(&c, 31, 25);  // 4MHz, 250ns/cycle
    // sm_config_set_clkdiv(&c, 1250); // 100kHz(10us/cycle), for debug

    pio_sm_init(pio, sm, offset, &c);
}
%}
