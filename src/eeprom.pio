.program singlewireComm
.wrap_target
    ; FIFOからOSRに読み込み
    pull block

    ; 24bit捨て、最下位1byteからシフトインするようにしておく
    out null, 24

    ; Xレジスタにループ回数を代入
    set x, 7

; 処理開始
send_loop:
    ; yレジスタにOSRをシフトイン
    out y, 1

    ; ピンを出力に
    set pindirs 1
    
    ; 一定時間ピンをLにする
    jmp !y set_zero

; t_bitは20us程度にしたい、41分周で合計67cycle

; 論理「1」出力 4cy + 63cy
set_one:
    set y 30
    ; ここで1us待ちたい、4*0.3=1.2より、4cy待つ
    set pins 0
    set pindirs 0 ; 入力に戻す 実はここでHに戻るまで4cy遅延する
    jmp wait_for_tbit

; 論理「0」出力 23cy + 44cy
set_zero:
    set y 21
    ; ここで7us待ちたい, 41分周なので0.3s/cy 7/0.3==23.3より、24cy待つ
    set pins 0 [19]
    set pindirs 0 ; 入力に戻す 実はここでHに戻るまで4cy遅延する

; (yレジスタの値 + 1) * 2 cy待つ
wait_for_tbit:
    jmp y-- wait_for_tbit [1]

; ループ回数をデクリメントして戻る
    jmp x-- send_loop
.wrap

% c-sdk {
void singlewireComm_program_init(PIO pio, uint sm, uint offset, uint pin) {

    pio_gpio_init(pio, pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, false);

    pio_sm_config c = singlewireComm_program_get_default_config(offset);
    sm_config_set_out_shift(&c, false, false, 32); // 左シフトで入れる
    sm_config_set_set_pins(&c, pin, 1);
    sm_config_set_clkdiv(&c, 41); // 41分周 = 3.048MHz

    pio_sm_init(pio, sm, offset, &c);
}
%}
