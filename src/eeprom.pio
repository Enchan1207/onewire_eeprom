.program singlewireComm

; インストラクション数削減のため、スタックにpushする値と操作とを規定する
;
; FFxxxxxx: EEPROMリセット
; 00xxxxNN: NNh書き込み
; 000002FF: 読み込み (ACK送信)
; 000001FF: 読み込み (NACK送信)

.wrap_target
ready:
    pull block

    set pindirs 1

    ; 最上位バイトに値が入っている場合はリセットルーチンへ
    out x, 8
    jmp x-- eeprom_reset

    ; 次の2バイトに値が入っている場合は読み出しモードとみなす(ここでは何もしない)
    out x, 16

    ; 通信ループ OSRが空になるまで繰り返す
    comm_loop:
        out y, 1

        ; Lに落とす
        set pins 0
        jmp y-- skip_t_low_0_wait
        nop [18] ; ここで t_low0 を稼ぐ
        skip_t_low_0_wait:
            set pindirs 0

        ; ISRに代入
        in pins, 1 [28] ; ここで t_rcv を稼ぐ

        set pindirs 1
        jmp !osre comm_loop

    ; 読み込みモードならACKかNACKを出力する、書き込みモードならACKを確認する
    set pins 0
    jmp x-- write_ack_or_nack
    jmp read_ack

    ; xが0ならNACK, 1ならACKを出力する
    write_ack_or_nack:
        jmp !x skip_nack_wait
        nop [18] ; ここで t_low0 を稼ぐ
        skip_nack_wait:
            set pindirs 0

    ; ISRをFIFOにpushして最初に戻る
    push noblock
    jmp ready

; リセットシーケンスを送るサブルーチン
eeprom_reset:
    ; リセットシーケンス:
    ; Lにして96us待機 -> INにして10us待機 -> Lにして1~2us待機 -> Lが返れば成功

    set pins 0

    ; t_reset待機 ((9 + 1) * (31 + 1) = 10 * 32 = 320cy = 96us以上)
    set x, 9
    wait_for_t_reset:
        jmp x-- wait_for_t_reset [31]

    ; INに戻してt_rrt待機 (32cy, 10.49us以上)
    set pindirs 0 [31]

    ; Lにセットしてt_drr待機(1 + 4 = 5cy, 1.5us以上)
    set pindirs 1
    set pins 0 [3]
    set x, 0

    ; *fallthrough

; ACKを確認するサブルーチン
read_ack:
    set pindirs 0
    in pins, 1
    push noblock
.wrap

% c-sdk {
void singlewireComm_program_init(PIO pio, uint sm, uint offset, uint pin) {

    pio_gpio_init(pio, pin);

    // 初期状態では入力にしておく
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, false);

    pio_sm_config c = singlewireComm_program_get_default_config(offset);

    // 左シフトで入れる
    sm_config_set_in_shift(&c, false, false, 32);
    sm_config_set_out_shift(&c, false, false, 32);

    // setで設定するピンのベースと数を設定
    sm_config_set_set_pins(&c, pin, 1);

    // inで取り込むピンのベースを設定
    sm_config_set_in_pins(&c, pin);

    // クロック設定
    sm_config_set_clkdiv(&c, 34);       // 3.67MHz
    // sm_config_set_clkdiv(&c, 1250);  // 100kHz(10us/cycle), for debug

    pio_sm_init(pio, sm, offset, &c);
}
%}
